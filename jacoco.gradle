apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco")
}

task jacocoTestReport(type: JacocoReport) {
    dependsOn = [
        ":ui:testDebugUnitTest",
        ":ui:createDebugCoverageReport",
        ":processor:test",
        ":generator:test",
        ":core:testDebugUnitTest"
    ]

    group = "Reporting"
    description = "Generate Jacoco coverage reports for both unit and instrumented unit tests"

    reports {
        csv.enabled false
        xml.enabled = true
        html.enabled = true

        xml.setDestination(file("${jacoco.reportsDir}/jacocoTestReport.xml"))
        html.setDestination(file("${jacoco.reportsDir}/html"))
    }

    def includesFilter = [
        '**/*Mapper*.*',
        '**/*Presenter*.*',
        '**/*ViewModel*.*'
    ]

    def excludesFilter = [
        '**/*Test*.*',
        '**/AutoValue_*.*',
        '**/*JavascriptBridge.class',
        '**/R.class',
        '**/R$*.class',
        '**/Manifest*.*',
        'android/**/*.*',
        '**/BuildConfig.*',
        '**/*$ViewBinder*.*',
        '**/*$ViewInjector*.*',
        '**/Lambda$*.class',
        '**/Lambda.class',
        '**/*Lambda.class',
        '**/*Lambda*.class',
        '**/lambda$*.class',
        '**/lambda.class',
        '**/*lambda.class',
        '**/*lambda*.class',
        '**/*$$special$$inlined$inject$*.*',
        '**/*$InjectAdapter.class',
        '**/*$ModuleAdapter.class',
        '**/*$ViewInjector*.class',
        '**/*_MembersInjector.class', //Dagger2 generated code
        '*/*_MembersInjector*.*', //Dagger2 generated code
        '**/*_*Factory*.*', //Dagger2 generated code
        '*/*Component*.*', //Dagger2 generated code
        '**/*Module*.*' //Dagger2 generated code
    ]

    def sourcesTree = [
        "./ui/src/main/kotlin",
        "./core/src/main/kotlin",
        "./processor/src/main/kotlin",
        "./generator/src/main/kotlin"
    ]

    def debugTree = fileTree(dir: "./ui/build/intermediates/classes/debug", excludes: excludesFilter) +
        fileTree(dir: "./ui/build/tmp/kotlin-classes/debug", excludes: excludesFilter) +
        fileTree(dir: "./processor/build/classes/kotlin/main", excludes: excludesFilter) +
        fileTree(dir: "./generator/build/classes/kotlin/main", excludes: excludesFilter) +
        fileTree(dir: "./core/build/intermediates/classes/debug", excludes: excludesFilter) +
        fileTree(dir: "./core/build/tmp/kotlin-classes/debug", excludes: excludesFilter)

    def executionTree = fileTree(dir: "./ui/build", includes: ["jacoco/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"]) +
        fileTree(dir: "./processor/build", includes: ["jacoco/test.exec"]) +
        fileTree(dir: "./generator/build", includes: ["jacoco/test.exec"]) +
        fileTree(dir: "./core/build", includes: ["jacoco/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"])

    getSourceDirectories().setFrom(files(sourcesTree))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(files([executionTree]))
}