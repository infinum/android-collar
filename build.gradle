buildscript {

    apply from: "config.gradle"
    apply from: "maven.gradle"

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath libs.gradle
        classpath libs.kotlin.plugin
        classpath libs.serialization.plugin
        classpath libs.cpd
        classpath libs.detekt.plugin
        classpath libs.ktlint
        classpath libs.dokka
    }
}

subprojects {
    def buildProperties = new Properties()
    file(rootDir.absolutePath + "/build.properties").withInputStream { buildProperties.load(it) }
    if (buildProperties.getProperty("build.debug").toBoolean()) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    def libraryannotations = libs.libraryannotations.get()
                    def librarycore = libs.librarycore.get()
                    def libraryui = libs.libraryui.get()
                    def libraryuinoop = libs.libraryuinoop.get()
                    def libraryprocessor = libs.libraryprocessor.get()
                    def librarygenerator = libs.librarygenerator.get()
                    def libraryplugin = libs.libraryplugin.get()

                    substitute module(libraryannotations.getModule().toString() + ":" + libraryannotations.getVersionConstraint().toString()) with project(':annotations')
                    substitute module(librarycore.getModule().toString() + ":" + librarycore.getVersionConstraint().toString()) with project(':core')
                    substitute module(libraryui.getModule().toString() + ":" + libraryui.getVersionConstraint().toString()) with project(':ui')
                    substitute module(libraryuinoop.getModule().toString() + ":" + libraryuinoop.getVersionConstraint().toString()) with project(':ui-no-op')
                    substitute module(libraryprocessor.getModule().toString() + ":" + libraryprocessor.getVersionConstraint().toString()) with project(':processor')
                    substitute module(librarygenerator.getModule().toString() + ":" + librarygenerator.getVersionConstraint().toString()) with project(':generator')
                    substitute module(libraryplugin.getModule().toString() + ":" + libraryplugin.getVersionConstraint().toString()) with project(':plugin')
                }
            }
        }
    }

    repositories {
        google()
        mavenCentral()
    }

    apply from: "$rootDir/cpd.gradle"
    apply from: "$rootDir/dokka.gradle"
    apply from: "$rootDir/ktlint.gradle"
    apply from: "$rootDir/detekt.gradle"
}

apply from: "deploy.gradle"
apply from: "jacoco.gradle"

tasks.withType(JavaCompile) {
    options.compilerArgs += ["--release", "8"]
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task lintAll(dependsOn: [
        ':core:lintRelease',
        ':ui:lintRelease',
        ':ui-no-op:lintRelease'
]) {
    group = "Verification"
    description = "Run Lint on all modules"
}

task detektAll(dependsOn: [
        ':annotations:detekt',
        ':core:detekt',
        ':ui:detekt',
        ':ui-no-op:detekt',
        ':processor:detekt',
        ':plugin:detekt',
        ':generator:detekt'
]) {
    group = "Verification"
    description = "Run Detekt on all modules"
}

task ktlintAll(dependsOn: [
        ':annotations:ktlintCheck',
        ':core:ktlintCheck',
        ':ui:ktlintCheck',
        ':ui-no-op:ktlintCheck',
        ':processor:ktlintCheck',
        ':plugin:ktlintCheck',
        ':generator:ktlintCheck'
]) {
    group = "Verification"
    description = "Run ktlint on all modules"
}

task cpdAll(dependsOn: [
        ':annotations:cpdCheck',
        ':core:cpdCheck',
        ':ui:cpdCheck',
        ':ui-no-op:cpdCheck',
        ':processor:cpdCheck',
        ':plugin:cpdCheck',
        ':generator:cpdCheck'
]) {
    group = "Verification"
    description = "Run CPD on all modules"
}

task runStaticChecks(dependsOn: [
        ':lintAll',
        ':detektAll',
        ':ktlintAll',
        ':cpdAll'
]) {
    group = "Verification"
    description = "Run static checks on all modules"
}
