buildscript {

    ext.buildConfig = [
        "minSdk"    : 21,
        "compileSdk": 30,
        "targetSdk" : 30,

        "buildTools": "30.0.3"
    ]

    apply from: "dependencies.gradle"

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath packages.gradle
        classpath packages.bintray
        classpath packages.kotlin.plugin
        classpath packages.kotlin.serialization_plugin
        classpath packages.cpd.plugin
        classpath packages.detekt.plugin
        classpath packages.ktlint.plugin
        classpath packages.dokka.plugin
    }
}

subprojects {
    def buildProperties = new Properties()
    file(rootDir.absolutePath+"/build.properties").withInputStream { buildProperties.load(it) }
    if (buildProperties.getProperty("build.debug").toBoolean()) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    substitute module(packages.collar.annotations) with project(':annotations')
                    substitute module(packages.collar.core) with project(':core')
                    substitute module(packages.collar.ui) with project(':ui')
                    substitute module(packages.collar.ui_no_op) with project(':ui-no-op')
                    substitute module(packages.collar.processor) with project(':processor')
                    substitute module(packages.collar.generator) with project(':generator')
                    substitute module(packages.collar.plugin) with project(':plugin')
                }
            }
        }
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://dl.bintray.com/infinum/android"
            content {
                includeGroup("co.infinum.collar")
            }
        }
        jcenter() {
            content {
                includeModule("com.soywiz.korlibs.korte", "korte-jvm")
                includeModule("org.jetbrains.trove4j", "trove4j")
                includeModule("org.jetbrains.kotlinx", "kotlinx-html-jvm")
                includeGroup("org.jetbrains.dokka")
                includeGroup("org.jetbrains")
                includeGroup("org.koin")
            }
        }
    }

    apply from: "$rootDir/cpd.gradle"
    apply from: "$rootDir/dokka.gradle"
    apply from: "$rootDir/ktlint.gradle"
    apply from: "$rootDir/detekt.gradle"
}

apply from: "shared.gradle"
apply from: "deploy.gradle"
apply from: "jacoco.gradle"

tasks.withType(JavaCompile) {
    options.compilerArgs += ["--release", "8"]
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task detektAll(dependsOn: [
    ':annotations:detekt',
    ':core:detekt',
    ':ui:detekt',
    ':ui-no-op:detekt',
    ':processor:detekt',
    ':plugin:detekt',
    ':generator:detekt'
]) {
    group = "Verification"
    description = "Run detekt on all modules"
}

task ktlintAll(dependsOn: [
        ':annotations:ktlintCheck',
        ':core:ktlintCheck',
        ':ui:ktlintCheck',
        ':ui-no-op:ktlintCheck',
        ':processor:ktlintCheck',
        ':plugin:ktlintCheck',
        ':generator:ktlintCheck'
]) {
    group = "Verification"
    description = "Run ktlint on all modules"
}

task cpdAll(dependsOn: [
        ':annotations:cpdCheck',
        ':core:cpdCheck',
        ':ui:cpdCheck',
        ':ui-no-op:cpdCheck',
        ':processor:cpdCheck',
        ':plugin:cpdCheck',
        ':generator:cpdCheck'
]) {
    group = "Verification"
    description = "Run CPD on all modules"
}

task runStaticChecks(dependsOn: ordered(
        ':detektAll',
        ':ktlintAll',
        ':cpdAll'
)) {
    group = "Verification"
    description = "Run static checks on all modules"
}
