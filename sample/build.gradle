apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'co.infinum.collar.plugin'
//apply plugin: 'co.infinum.collar.plugin.CollarPlugin'
apply plugin: "com.archinamon.aspectj"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "co.infinum.collar.sample"
        minSdkVersion 10
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"

        buildTypes {
            debug {
                debug {
                    debuggable true
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    project.android.applicationVariants.all { variant ->
        // Gets the variant name and capitalize the first character
        def variantName = variant.name[0].toUpperCase() + variant.name[1..-1].toLowerCase()

        // Weave the binary for the actual code
        // CompileSources task is invoked after java and kotlin compilers and copy kotlin classes
        // That's the moment we have the finalized byte code and we can weave the aspects
        project.tasks.findByName('compile' + variantName + 'Sources')?.doLast {
            project.tasks.getByName('transformClassesWithAspectjFor'+ variantName)
        }

        // Weave the binary for unit tests
        // compile unit tests task is invoked after the byte code is finalized
        // This is the time that we can weave the aspects onto byte code
        project.tasks.findByName('compile' + variantName + 'UnitTestSources')?.doLast {
            project.tasks.getByName('transformClassesWithAspectjFor'+ variantName+ 'AndroidTest')
        }
    }
}

aspectj {
    ajc '1.9.4' // default value
    debugInfo true
    weaveInfo true
    ajcArgs << '-referenceInfo' << '-warn:deprecation' << '-verbose'
    includeAspectsFromJar 'core'
}

dependencies {
    implementation packages.kotlin.core

    testImplementation packages.junit
    testImplementation packages.truth

    implementation project (":core")
}