task deployAnnotations(dependsOn: [
        ':annotations:clean',
        ':annotations:build',
        ':annotations:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployCore(dependsOn: [
        ':core:clean',
        ':core:build',
        ':core:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployUi(dependsOn: [
        ':ui:clean',
        ':ui:build',
        ':ui:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployUiNoOp(dependsOn: [
        ':ui-no-op:clean',
        ':ui-no-op:build',
        ':ui-no-op:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployProcessor(dependsOn: [
        ':processor:clean',
        ':processor:build',
        ':processor:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployGenerator(dependsOn: [
        ':generator:clean',
        ':generator:build',
        ':generator:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployPlugin(dependsOn: [
        ':plugin:clean',
        ':plugin:build',
        ':plugin:bintrayUpload'
]) {
    group = "Deploy"
    description = "Deploy module to Bintray"
}

task deployAll(dependsOn: ordered(
        'deployAnnotations',
        'deployCore',
        'deployUi',
        'deployUiNoOp',
        'deployProcessor',
        'deployGenerator',
        'deployPlugin'
)) {
    group = "Deploy"
    description = "Deploy all modules to Bintray"
}

def ordered(String... taskPaths) {
    def allTasks = taskPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < allTasks.size() - 1; i++) {
        allTasks[i + 1].mustRunAfter(allTasks[i])
    }
    return allTasks
}